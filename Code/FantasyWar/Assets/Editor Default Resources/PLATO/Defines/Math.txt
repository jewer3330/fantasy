local Math = {
    Color = '#ff80a5ff',

    Nodes = {
        {
            Title = 'Random',
            In = {
				{ Title = 'Do', Type = 'null' },
                { Title = 'Min', Type = 'System.Int32' },
                { Title = 'Max', Type = 'System.Int32' },
            },
            Out = {
				{ Title = 'Done', Type = 'null' },
                { Title = 'Value', Type = 'System.Int32' },
            },
            Format = 'math.random({Min}, {Max})',
            FormatCSharp = '{Value} = UnityEngine.Random.Range({Min}, {Max})',
        },
		{
			Title = 'Sin',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Angle', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.sin(math.rad({Angle}))',
			FormatCSharp = '{Result} = Mathf.Sin(Mathf.Deg2Rad * {Angle})',
		},
		{
			Title = 'Cos',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Angle', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.cos(math.rad({Angle}))',
			FormatCSharp = '{Result} = Mathf.Cos(Mathf.Deg2Rad * {Angle})',
		},
		{
			Title = 'Tan',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Angle', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.tan(math.rad({Angle}))',
			FormatCSharp = '{Result} = Mathf.Tan(Mathf.Deg2Rad * {Angle})',
		},
		{
			Title = 'ASin',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Value', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Angle', Type = 'System.Single' },
			},
			Format = 'math.deg(math.asin({Value}))',
			FormatCSharp = '{Result} = Mathf.Rad2Deg * Mathf.Asin({Value})',
		},
		{
			Title = 'ACos',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Value', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Angle', Type = 'System.Single' },
			},
			Format = 'math.deg(math.acos({Value}))',
			FormatCSharp = '{Result} = Mathf.Rad2Deg * Mathf.Acos({Value})',
		},
		{
			Title = 'ATan',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Value', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Angle', Type = 'System.Single' },
			},
			Format = 'math.deg(math.atan({Value}))',
			FormatCSharp = '{Result} = Mathf.Rad2Deg * Mathf.Atan({Value})',
		},
		{
			Title = 'Pow',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'X', Type = 'System.Single' },
				{ Title = 'Y', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.pow({X}, {Y})',
			FormatCSharp = '{Result} = Mathf.Pow({X}, {Y})',
		},
		{
			Title = 'Sqrt',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Value', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.sqrt({Value})',
			FormatCSharp = '{Result} = Mathf.Sqrt({Value})',
		},
		{
			Title = 'Ceil',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Value', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.ceil({Value})',
			FormatCSharp = '{Result} = Mathf.Ceil({Value})',
		},
		{
			Title = 'Floor',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Value', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.floor({Value})',
			FormatCSharp = '{Result} = Mathf.Floor({Value})',
		},
		{
			Title = 'Max',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'A', Type = 'System.Single' },
				{ Title = 'B', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.max({A}, {B})',
			FormatCSharp = '{Result} = Mathf.Max({A}, {B})',
		},
		{
			Title = 'Min',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'A', Type = 'System.Single' },
				{ Title = 'B', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.min({A}, {B})',
			FormatCSharp = '{Result} = Mathf.Min({A}, {B})',
		},
        {
			Title = 'Abs',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'Value', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = 'math.abs({Value})',
			FormatCSharp = '{Result} = Mathf.Abs({Value})',
		},
		{
			Title = 'GetLineRotation',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'StartX', Type = 'System.Single' },
				{ Title = 'StartY', Type = 'System.Single' },
				{ Title = 'EndX', Type = 'System.Single' },
				{ Title = 'EndY', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Rotation', Type = 'System.Single' },
			},
			Format = 'Quaternion.LookRotation(Vector3({EndX} - {StartX}, 0, {EndY} - {StartY})).eulerAngles.y',
			FormatCSharp = '{Rotation} = Quaternion.LookRotation(new Vector3({EndX} - {StartX}, 0, {EndY} - {StartY})).eulerAngles.y',
		},
			{
			Title = 'Middle',
			In = {
				{ Title = 'Do', Type = 'null' },
				{ Title = 'A', Type = 'System.Single' },
				{ Title = 'B', Type = 'System.Single' },
			},
			Out = {
				{ Title = 'Done', Type = 'null' },
				{ Title = 'Result', Type = 'System.Single' },
			},
			Format = '({A}+{B})*0.5',
            FormatCSharp = '{Result} = ({A}+{B})*0.5f',
		},
    },
}
return Math
