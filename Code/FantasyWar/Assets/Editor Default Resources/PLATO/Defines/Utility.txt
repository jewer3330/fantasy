local Utility = {
    Color = '#808080ff',

    Nodes = {
        {
            Title = 'Print',
            In = {
                { Title = 'Print', Type = 'null' },
                { Title = 'Message', Type = 'System.String' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
            },
            Format = 'print({Message})',
            FormatCSharp = 'UnityEngine.Debug.Log({Message})',
        },
        {
            Title = 'PrintFloat',
            In = {
                { Title = 'Print', Type = 'null' },
                { Title = 'Float', Type = 'System.Single' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
            },
            Format = 'print({Float})',
            FormatCSharp = 'UnityEngine.Debug.Log({Float})',
        },
        {
            Title = 'PrintInt',
            In = {
                { Title = 'Print', Type = 'null' },
                { Title = 'Int', Type = 'System.Int32' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
            },
            Format = 'print({Int})',
            FormatCSharp = 'UnityEngine.Debug.Log({Int})',
        },
        {
            Title = 'PrintUInt',
            In = {
                { Title = 'Print', Type = 'null' },
                { Title = 'UInt', Type = 'System.UInt64' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
            },
            Format = 'print({UInt})',
            FormatCSharp = 'UnityEngine.Debug.Log({UInt})',
        },
        {
            Title = 'Name',
            In = {
                { Title = 'Target', Type = 'UnityEngine.GameObject' },
            },
            Out = {
                { Title = 'Name', Type = 'System.String' },
            },
            Format = 'PlatoUtil.DesignLevel.transfomr:Find({Target}).gameObject.name',
            FormatCSharp = '{Target}.name',
        },
        {
            Title = 'Int2String',
            In = {
                { Title = 'Int', Type = 'System.Int32' },
            },
            Out = {
                { Title = 'String', Type = 'System.String' },
            },
            Format = 'tostring({Int})',
            Format = '({Int}).ToString()',
        },
        {
            Title = 'IncreaseInt',
            In = {
                { Title = 'Increase', Type = 'null' },
                { Title = 'Name', Type = 'System.String' },
                { Title = 'Value', Type = 'System.Int32' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
            },
            Format = 'self[{Name}] = self[{Name}] + {Value}',
            FormatCSharp = '{VALUE_NAME} = {VALUE_NAME} + {Value}',
        },
        {
            Title = 'IntOperation',
            In = {
                { Title = 'Operation', Type = 'null' },
                { Title = 'Base', Type = 'System.Int32' },
                { Title = 'Value', Type = 'System.Int32' },
                { Title = 'Method', Type = 'UnityEngine.UI.Dropdown', Items = 'Add;Sub;Multi;Divis' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
                { Title = 'Final', Type = 'System.Int32' },
            },
        },
        {
            Title = 'FloatOperation',
            In = {
                { Title = 'Operation', Type = 'null' },
                { Title = 'Base', Type = 'System.Single' },
                { Title = 'Value', Type = 'System.Single' },
                { Title = 'Method', Type = 'UnityEngine.UI.Dropdown', Items = 'Add;Sub;Multi;Divis' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
                { Title = 'Final', Type = 'System.Single' },
            },
        },
        {
            Title = 'PrintVector',
            In = {
                { Title = 'Print', Type = 'null' },
                { Title = 'X', Type = 'System.Single' },
                { Title = 'Y', Type = 'System.Single' },
                { Title = 'Z', Type = 'System.Single' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
            },
            Format = 'print({X}, {Y}, {Z})',
            FormatCSharp = 'UnityEngine.Debug.Log(new Vector3({X} {Y} {Z}))',
        },
        {
            Title = 'UnPackArray',
            In = {
                { Title = 'UnPack', Type = 'null' },
                { Title = 'Array', Type = 'System.UInt64[]' },
            },
            Out = {
                { Title = 'LoopBody', Type = 'null', IsEvent = true },
                { Title = 'Done', Type = 'null', IsEvent = true },
                { Title = 'Result', Type = 'System.UInt64' },
            },
        },
        {
            Title = 'TurnToArray',
            In = {
                { Title = 'Do', Type = 'null' },
                { Title = 'Single', Type = 'System.UInt64' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
                { Title = 'Result', Type = 'System.UInt64[]' },
            },
        },
        {
            Title = 'Distance',
            In = {
                { Title = 'Do', Type = 'null' },
                { Title = 'AX', Type = 'System.Single' },
                { Title = 'AY', Type = 'System.Single' },
                { Title = 'BX', Type = 'System.Single' },
                { Title = 'BY', Type = 'System.Single' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
                { Title = 'Result', Type = 'System.Single' },
            },
            Format = 'Vector2.Distance(Vector2({AX}, {AY}), Vector2({BX}, {BY}))',
            FormatCSharp = '{Result} = Vector2.Distance(new Vector2({AX}, {AY}), new Vector2({BX}, {BY}))',
        },
        {
            Title = 'GetCurTime',
            In = {
                { Title = 'Do', Type = 'null' },
            },
            Out = {
                { Title = 'Done', Type = 'null' },
                { Title = 'Result', Type = 'System.Single' },
            },
            Format = 'Time.time',
            FormatCSharp = 'GetCurTime_{NODE_ID}_Result = Time.time',
        },

    },
}
return Utility
